// Flutter imports:
import 'package:flutter/material.dart';
// Package imports:
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:teta_core/teta_core.dart';
// Project imports:
import 'package:teta_widgets/src/elements/index.dart';

// ignore_for_file: public_member_api_docs

/// Key to identify the dataset generated by this node.
const key = 'Firebase Is Logged';

/// Key to identify the main property of dataset.
/// It will be bool.
const keyAttr = 'value';

class WFirebaseIsAuthenticatedBuilder extends StatefulWidget {
  /// Constructor
  const WFirebaseIsAuthenticatedBuilder(
    final Key? key, {
    required this.node,
    required this.forPlay,
    required this.params,
    required this.states,
    required this.dataset,
    this.child,
    this.loop,
  }) : super(key: key);

  /// The original CNode
  final CNode node;

  /// The opzional child of this widget
  final CNode? child;

  /// Are we in Play Mode?
  final bool forPlay;

  /// The optional position inside a loop
  /// Widgets can be instantiate inside ListView.builder and other list widgets
  /// [loop] indicates the index position inside them
  final int? loop;

  /// The params of Scaffold
  final List<VariableObject> params;

  /// The states of Scaffold
  final List<VariableObject> states;

  /// The dataset list created by other widgets inside the same page
  final List<DatasetObject> dataset;

  @override
  WFirebaseIsAuthenticatedBuilderState createState() =>
      WFirebaseIsAuthenticatedBuilderState();
}

class WFirebaseIsAuthenticatedBuilderState
    extends State<WFirebaseIsAuthenticatedBuilder> {
  DatasetObject _map = DatasetObject(
    name: key,
    map: [
      <String, dynamic>{keyAttr: false}
    ],
  );

  @override
  Widget build(final BuildContext context) {
    return NodeSelectionBuilder(
      node: widget.node,
      forPlay: widget.forPlay,
      child: BlocBuilder<FirebaseCubit, bool>(
        builder: (final context, final state) => state
            ? FutureBuilder(
                future: isUserLogged(),
                builder: (final context, final snapshot) {
                  if (snapshot.hasData) {
                    _map = _map.copyWith(
                      map: [
                        <String, dynamic>{keyAttr: snapshot.data}
                      ],
                    );

                    final list = addDataset(context, widget.dataset, _map);
                    ChildConditionBuilder(
                      ValueKey('${widget.node.nid} ${widget.loop}'),
                      name: widget.node.intrinsicState.displayName,
                      node: widget.node,
                      child: widget.child,
                      params: widget.params,
                      states: widget.states,
                      dataset: list,
                      loop: widget.loop,
                      forPlay: widget.forPlay,
                    );
                  }
                  return const CircularProgressIndicator();
                },
              )
            : ChildConditionBuilder(
                ValueKey('${widget.node.nid} ${widget.loop}'),
                name: widget.node.intrinsicState.displayName,
                node: widget.node,
                child: widget.child,
                params: widget.params,
                states: widget.states,
                dataset: widget.dataset,
                forPlay: widget.forPlay,
                loop: widget.loop,
              ),
      ),
    );
  }

  Future<bool> isUserLogged() async {
    /*final prj =
        BlocProvider.of<FocusProjectBloc>(context).state as ProjectLoaded;
    if (FirebaseAuth.instanceFor(
          app: Firebase.app(prj.prj.name),
        ).currentUser?.uid ==
        null) {
      return false;
    } else {
      return true;
    }*/
    return false;
  }
}
